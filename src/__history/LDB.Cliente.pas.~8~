unit LDB.Cliente;

interface

type

TCliente = class
  private
    FSobrenome: string;
    FTitulo: string;
    FCEP: string;
    FNumero: string;
    FComplemento: string;
    FIdCliente: integer;
    FNome: string;
    FCidade: string;
    FEndereco: string;
    FTelefone: string;
    FEstado: string;
    FFgAtivo: integer;
    FCelular: string;
    procedure SetCelular(const Value: string);
    procedure SetCEP(const Value: string);
    procedure SetCidade(const Value: string);
    procedure SetComplemento(const Value: string);
    procedure SetEndereco(const Value: string);
    procedure SetEstado(const Value: string);
    procedure SetFgAtivo(const Value: integer);
    procedure SetIdCliente(const Value: integer);
    procedure SetNome(const Value: string);
    procedure SetNumero(const Value: string);
    procedure SetSobrenome(const Value: string);
    procedure SetTelefone(const Value: string);
    procedure SetTitulo(const Value: string);
  protected
  public
  property IdCliente : integer read FIdCliente write SetIdCliente;
  property Titulo : string read FTitulo write SetTitulo;
  property Nome : string read FNome write SetNome;
  property Sobrenome : string read FSobrenome write SetSobrenome;
  property Endereco : string read FEndereco write SetEndereco;
  property Numero : string read FNumero write SetNumero;
  property Complemento : string read FComplemento write SetComplemento;
  property CEP : string read FCEP write SetCEP;
  property Cidade : string read FCidade write SetCidade;
  property Estado : string read FEstado write SetEstado;
  property Telefone : string read FTelefone write SetTelefone;
  property Celular : string read FCelular write SetCelular;
  property FgAtivo : integer read FFgAtivo write SetFgAtivo;
  function pesquisar(id : integer):TCliente;
  published
end;

implementation

uses LBD.SQL.DataModule;

{ TCliente }

function TCliente.pesquisar(id : integer): TCliente;
var s : integer;
begin
  with LBD.SQL.DataModule.dm.Query do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM tb_cliente WHERE id_cliente = :id');
    ParamByName('id').Value := id;
    Open;
    s := RecordCount;
    Self.IdCliente := FieldByName('id_cliente').AsInteger;
    Self.FSobrenome := FieldByName('sobrenome').AsString;
    Self.FTitulo := FieldByName('titulo').AsString;
    Self.FCEP := FieldByName('cep').AsString;
    Self.FNumero := FieldByName('numero').AsString;
    Self.FComplemento := FieldByName('complemento').AsString;
    Self.FNome := FieldByName('nome').AsString;
    Self.FCidade := FieldByName('cidade').AsString;
    Self.FEndereco := FieldByName('endereco').AsString;
    Self.FTelefone := FieldByName('fone_fixo').AsString;
    Self.FEstado := FieldByName('estado').AsString;
    Self.FFgAtivo := FieldByName('fg_ativo').AsInteger;
    Self.FCelular := FieldByName('fone_movel').AsString;

    Result := Self;
  end;
end;

procedure TCliente.SetCelular(const Value: string);
begin
  FCelular := Value;
end;

procedure TCliente.SetCEP(const Value: string);
begin
  FCEP := Value;
end;

procedure TCliente.SetCidade(const Value: string);
begin
  FCidade := Value;
end;

procedure TCliente.SetComplemento(const Value: string);
begin
  FComplemento := Value;
end;

procedure TCliente.SetEndereco(const Value: string);
begin
  FEndereco := Value;
end;

procedure TCliente.SetEstado(const Value: string);
begin
  FEstado := Value;
end;

procedure TCliente.SetFgAtivo(const Value: integer);
begin
  FFgAtivo := Value;
end;

procedure TCliente.SetIdCliente(const Value: integer);
begin
  FIdCliente := Value;
end;

procedure TCliente.SetNome(const Value: string);
begin
  FNome := Value;
end;

procedure TCliente.SetNumero(const Value: string);
begin
  FNumero := Value;
end;

procedure TCliente.SetSobrenome(const Value: string);
begin
  FSobrenome := Value;
end;

procedure TCliente.SetTelefone(const Value: string);
begin
  FTelefone := Value;
end;

procedure TCliente.SetTitulo(const Value: string);
begin
  FTitulo := Value;
end;

end.
